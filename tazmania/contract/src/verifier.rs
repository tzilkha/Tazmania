use electron_rs::verifier::near::*;

pub struct Verifier {
    pvk: PreparedVerifyingKey,
}

impl Verifier {
    pub fn new() -> Self {
        let _vk = get_vkey();
        let vk = parse_verification_key(_vk).unwrap();
        let pvk = get_prepared_verifying_key(vk);

        Self { pvk }
    }
    pub fn verify(&self, proof: String, public: String) -> bool {
        verify_proof(self.pvk.clone(), proof, public).unwrap()
    }
}

// ------------------------- Circuit VKey -----------------------

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn init() {
        let public = r#"
            [
             "14114388566649458089567037548032873808524665301324522922664751829136768599953",
             "11778569245147538738994022322712725094916340624517029213976247073592110043835"
            ]
        "#;

        let proof = r#"
            {
             "pi_a": [
              "15570543136894027095165534212562607768072196542958444179849951269833967742294",
              "20415365531021320968497922898979645583801848160967909450442823523928681060851",
              "1"
             ],
             "pi_b": [
              [
               "15024636286546184474489321037684688415093677862989520559633193236743706836552",
               "8284046524999072659943059729842613340682820045536926462600665331588790713809"
              ],
              [
               "10840999951319576067715348530749989971008281708603248383269807200575304443525",
               "6490819091902178631753388763191209025645622767402387977865074225954056573510"
              ],
              [
               "1",
               "0"
              ]
             ],
             "pi_c": [
              "5431059359436900034846527398610929928067693331173779677183483890216496620101",
              "18546350729038846739564900728630296456592267479046320122352445688736477949980",
              "1"
             ],
             "protocol": "groth16",
             "curve": "bn128"
            }
        "#;

        println!("Testing verifier..");
        let v = Verifier::new(get_vkey());
        let r = v.verify(proof.to_string(), public.to_string());
        println!("verifier: {}", r);
    }
}

fn get_vkey() -> String {
    let vkey_str = r#"
        {
         "protocol": "groth16",
         "curve": "bn128",
         "nPublic": 2,
         "vk_alpha_1": [
          "20491192805390485299153009773594534940189261866228447918068658471970481763042",
          "9383485363053290200918347156157836566562967994039712273449902621266178545958",
          "1"
         ],
         "vk_beta_2": [
          [
           "6375614351688725206403948262868962793625744043794305715222011528459656738731",
           "4252822878758300859123897981450591353533073413197771768651442665752259397132"
          ],
          [
           "10505242626370262277552901082094356697409835680220590971873171140371331206856",
           "21847035105528745403288232691147584728191162732299865338377159692350059136679"
          ],
          [
           "1",
           "0"
          ]
         ],
         "vk_gamma_2": [
          [
           "10857046999023057135944570762232829481370756359578518086990519993285655852781",
           "11559732032986387107991004021392285783925812861821192530917403151452391805634"
          ],
          [
           "8495653923123431417604973247489272438418190587263600148770280649306958101930",
           "4082367875863433681332203403145435568316851327593401208105741076214120093531"
          ],
          [
           "1",
           "0"
          ]
         ],
         "vk_delta_2": [
          [
           "17608963753378099486245458723771923191425930747139112370610976690633207576600",
           "502327822159726970000387749281741394036053489703183429816461629884219340919"
          ],
          [
           "6381936594791359602770991568909069629025254801614368938598939969718914424925",
           "11353215306399907187438531994284586041711480912639561106259508619293648058580"
          ],
          [
           "1",
           "0"
          ]
         ],
         "vk_alphabeta_12": [
          [
           [
            "2029413683389138792403550203267699914886160938906632433982220835551125967885",
            "21072700047562757817161031222997517981543347628379360635925549008442030252106"
           ],
           [
            "5940354580057074848093997050200682056184807770593307860589430076672439820312",
            "12156638873931618554171829126792193045421052652279363021382169897324752428276"
           ],
           [
            "7898200236362823042373859371574133993780991612861777490112507062703164551277",
            "7074218545237549455313236346927434013100842096812539264420499035217050630853"
           ]
          ],
          [
           [
            "7077479683546002997211712695946002074877511277312570035766170199895071832130",
            "10093483419865920389913245021038182291233451549023025229112148274109565435465"
           ],
           [
            "4595479056700221319381530156280926371456704509942304414423590385166031118820",
            "19831328484489333784475432780421641293929726139240675179672856274388269393268"
           ],
           [
            "11934129596455521040620786944827826205713621633706285934057045369193958244500",
            "8037395052364110730298837004334506829870972346962140206007064471173334027475"
           ]
          ]
         ],
         "IC": [
          [
           "14197337208806770545889220037358805071954256513497618666763526856238699710862",
           "9453653003318842103590170162898346038399530062335296624636426850906339758932",
           "1"
          ],
          [
           "7374419710074923783649892211890616707963750737341310197238451007583332192797",
           "4777866817750211338926228749453665894287783251391950411282042253958828314422",
           "1"
          ],
          [
           "5944135141027406582923479745934505228510427791131178445052716386361609615767",
           "12206970540198405095222264634510513580619878699676273073206648968392358034589",
           "1"
          ]
         ]
        }
    "#;
    vkey_str.to_string()
}

// ------------------------- Tests -----------------------

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn init() {
        let public = r#"
            [
             "14114388566649458089567037548032873808524665301324522922664751829136768599953",
             "11778569245147538738994022322712725094916340624517029213976247073592110043835"
            ]
        "#;

        let proof = r#"
            {
             "pi_a": [
              "15570543136894027095165534212562607768072196542958444179849951269833967742294",
              "20415365531021320968497922898979645583801848160967909450442823523928681060851",
              "1"
             ],
             "pi_b": [
              [
               "15024636286546184474489321037684688415093677862989520559633193236743706836552",
               "8284046524999072659943059729842613340682820045536926462600665331588790713809"
              ],
              [
               "10840999951319576067715348530749989971008281708603248383269807200575304443525",
               "6490819091902178631753388763191209025645622767402387977865074225954056573510"
              ],
              [
               "1",
               "0"
              ]
             ],
             "pi_c": [
              "5431059359436900034846527398610929928067693331173779677183483890216496620101",
              "18546350729038846739564900728630296456592267479046320122352445688736477949980",
              "1"
             ],
             "protocol": "groth16",
             "curve": "bn128"
            }
        "#;

        println!("Testing verifier..");
        let v = Verifier::new();
        let r = v.verify(proof.to_string(), public.to_string());
        println!("verifier: {}", r);
    }
}
